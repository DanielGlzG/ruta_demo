import 'package:ruta_demo/main/domain/entities/pedido.dart';
import 'package:ruta_demo/main/presentation/widgets/partidasWidget.dart';

class PedidoMapper {
  static Pedido jsonToEntity(Map<String, dynamic> json) => Pedido(
        doctoVeId: json["doctoVeId"],
        tipoDocto: json["tipoDocto"],
        subTipoDocto: json["subTipoDocto"],
        sucursalId: json["sucursalId"],
        folio: json["folio"],
        fecha: DateTime.parse(json["fecha"]),
        hora: json["hora"],
        claveCliente: json["claveCliente"],
        clienteId: json["clienteId"],
        dirCliId: json["dirCliId"],
        dirConsigId: json["dirConsigId"],
        almacenId: json["almacenId"],
        lugarExpedicionId: json["lugarExpedicionId"],
        monedaId: json["monedaId"],
        tipoCambio: json["tipoCambio"],
        tipoDscto: json["tipoDscto"],
        dsctoPctje: json["dsctoPctje"],
        dsctoImporte: json["dsctoImporte"],
        estatus: json["estatus"],
        aplicado: json["aplicado"],
        fechaVigenciaEntrega: DateTime.parse(json["fechaVigenciaEntrega"]),
        ordenCompra: json["ordenCompra"],
        fechaOrdenCompra: json["fechaOrdenCompra"],
        folioReciboMercancia: json["folioReciboMercancia"],
        fechaReciboMercancia: json["fechaReciboMercancia"],
        descripcion: json["descripcion"],
        importeNeto: json["importeNeto"],
        fletes: json["fletes"],
        otrosCargos: json["otrosCargos"],
        totalImpuestos: json["totalImpuestos"],
        totalRetenciones: json["totalRetenciones"],
        totalAnticipos: json["totalAnticipos"],
        pesoEmbarque: json["pesoEmbarque"],
        formaEmitida: json["formaEmitida"],
        contabilizado: json["contabilizado"],
        acreditarCxc: json["acreditarCxc"],
        sistemaOrigen: json["sistemaOrigen"],
        condPagoId: json["condPagoId"],
        fechaDsctoPpag: json["fechaDsctoPpag"],
        pctjeDsctoPpag: json["pctjeDsctoPpag"],
        vendedorId: json["vendedorId"],
        pctjeComis: json["pctjeComis"],
        viaEmbarqueId: json["viaEmbarqueId"],
        importeCobro: json["importeCobro"],
        descripcionCobro: json["descripcionCobro"],
        impuestoSustituidoId: json["impuestoSustituidoId"],
        impuestoSustitutoId: json["impuestoSustitutoId"],
        usuarioCreador: json["usuarioCreador"],
        esCfd: json["esCfd"],
        modalidadFacturacion: json["modalidadFacturacion"],
        enviado: json["enviado"],
        fechaHoraEnvio: json["fechaHoraEnvio"],
        emailEnvio: json["emailEnvio"],
        cfdEnvioEspecial: json["cfdEnvioEspecial"],
        usoCfdi: json["usoCfdi"],
        cfdiCertificado: json["cfdiCertificado"],
        metodoPagoSat: json["metodoPagoSat"],
        cfdiFactDevueltaId: json["cfdiFactDevueltaId"],
        fechaHoraCreacion: DateTime.parse(json["fechaHoraCreacion"]),
        usuarioUltModif: json["usuarioUltModif"],
        usuarioAutCreacion: json["usuarioAutCreacion"],
        fechaHoraUltModif: DateTime.parse(json["fechaHoraUltModif"]),
        cargarSun: json["cargarSun"],
        usuarioAutModif: json["usuarioAutModif"],
        usuarioCancelacion: json["usuarioCancelacion"],
        fechaHoraCancelacion: json["fechaHoraCancelacion"],
        usuarioAutCancelacion: json["usuarioAutCancelacion"],
        partidas: json['detalles'] != null
            ? json['detalles']
                .map((partidaJson) => PartidasMapper.jsonToEntity(partidaJson))
                .toList()
            : [],
      );

  static Map<String, dynamic> entityToJson(Pedido pedido) => {
        "doctoVeId": pedido.doctoVeId,
        "tipoDocto": pedido.tipoDocto,
        "subTipoDocto": pedido.subTipoDocto,
        "sucursalId": pedido.sucursalId,
        "folio": pedido.folio,
        "fecha":
            "${pedido.fecha.year.toString().padLeft(4, '0')}-${pedido.fecha.month.toString().padLeft(2, '0')}-${pedido.fecha.day.toString().padLeft(2, '0')}",
        "hora": pedido.hora,
        "claveCliente": pedido.claveCliente,
        "clienteId": pedido.clienteId,
        "dirCliId": pedido.dirCliId,
        "dirConsigId": pedido.dirConsigId,
        "almacenId": pedido.almacenId,
        "lugarExpedicionId": pedido.lugarExpedicionId,
        "monedaId": pedido.monedaId,
        "tipoCambio": pedido.tipoCambio,
        "tipoDscto": pedido.tipoDscto,
        "dsctoPctje": pedido.dsctoPctje,
        "dsctoImporte": pedido.dsctoImporte,
        "estatus": pedido.estatus,
        "aplicado": pedido.aplicado,
        "fechaVigenciaEntrega":
            "${pedido.fechaVigenciaEntrega.year.toString().padLeft(4, '0')}-${pedido.fechaVigenciaEntrega.month.toString().padLeft(2, '0')}-${pedido.fechaVigenciaEntrega.day.toString().padLeft(2, '0')}",
        "ordenCompra": pedido.ordenCompra,
        "fechaOrdenCompra": pedido.fechaOrdenCompra,
        "folioReciboMercancia": pedido.folioReciboMercancia,
        "fechaReciboMercancia": pedido.fechaReciboMercancia,
        "descripcion": pedido.descripcion,
        "importeNeto": pedido.importeNeto,
        "fletes": pedido.fletes,
        "otrosCargos": pedido.otrosCargos,
        "totalImpuestos": pedido.totalImpuestos,
        "totalRetenciones": pedido.totalRetenciones,
        "totalAnticipos": pedido.totalAnticipos,
        "pesoEmbarque": pedido.pesoEmbarque,
        "formaEmitida": pedido.formaEmitida,
        "contabilizado": pedido.contabilizado,
        "acreditarCxc": pedido.acreditarCxc,
        "sistemaOrigen": pedido.sistemaOrigen,
        "condPagoId": pedido.condPagoId,
        "fechaDsctoPpag": pedido.fechaDsctoPpag,
        "pctjeDsctoPpag": pedido.pctjeDsctoPpag,
        "vendedorId": pedido.vendedorId,
        "pctjeComis": pedido.pctjeComis,
        "viaEmbarqueId": pedido.viaEmbarqueId,
        "importeCobro": pedido.importeCobro,
        "descripcionCobro": pedido.descripcionCobro,
        "impuestoSustituidoId": pedido.impuestoSustituidoId,
        "impuestoSustitutoId": pedido.impuestoSustitutoId,
        "usuarioCreador": pedido.usuarioCreador,
        "esCfd": pedido.esCfd,
        "modalidadFacturacion": pedido.modalidadFacturacion,
        "enviado": pedido.enviado,
        "fechaHoraEnvio": pedido.fechaHoraEnvio,
        "emailEnvio": pedido.emailEnvio,
        "cfdEnvioEspecial": pedido.cfdEnvioEspecial,
        "usoCfdi": pedido.usoCfdi,
        "cfdiCertificado": pedido.cfdiCertificado,
        "metodoPagoSat": pedido.metodoPagoSat,
        "cfdiFactDevueltaId": pedido.cfdiFactDevueltaId,
        "fechaHoraCreacion": pedido.fechaHoraCreacion.toIso8601String(),
        "usuarioUltModif": pedido.usuarioUltModif,
        "usuarioAutCreacion": pedido.usuarioAutCreacion,
        "fechaHoraUltModif": pedido.fechaHoraUltModif.toIso8601String(),
        "cargarSun": pedido.cargarSun,
        "usuarioAutModif": pedido.usuarioAutModif,
        "usuarioCancelacion": pedido.usuarioCancelacion,
        "fechaHoraCancelacion": pedido.fechaHoraCancelacion,
        "usuarioAutCancelacion": pedido.usuarioAutCancelacion,
        "detalles": pedido.partidas
            .map((partida) => PartidasMapper.entityToJson(partida))
            .toList(),
      };
}

class PartidasMapper {
  static PartidaPedido jsonToEntity(Map<String, dynamic> json) => PartidaPedido(
        doctoVeDetId: json["doctoVeDetId"],
        claveArticulo: json["claveArticulo"],
        articuloId: json["articuloId"],
        unidades: json["unidades"],
        unidadesComprom: json["unidadesComprom"],
        unidadesSurtDev: json["unidadesSurtDev"],
        unidadesASurtir: json["unidadesASurtir"],
        precioUnitario: json["precioUnitario"],
        pctjeDscto: json["pctjeDscto"],
        pctjeDsctoCli: json["pctjeDsctoCli"],
        dsctoArt: json["dsctoArt"],
        dsctoExtra: json["dsctoExtra"],
        pctjeDsctoVol: json["pctjeDsctoVol"],
        pctjeDsctoPromo: json["pctjeDsctoPromo"],
        precioTotalNeto: json["precioTotalNeto"],
        pctjeComis: json["pctjeComis"],
        rol: json["rol"],
        notas: json["notas"],
        terceroCoId: json["terceroCoId"],
        posicion: json["posicion"],
      );

  static Map<String, dynamic> entityToJson(PartidaPedido partida) => {
        "doctoVeDetId": partida.doctoVeDetId,
        "claveArticulo": partida.claveArticulo,
        "articuloId": partida.articuloId,
        "unidades": partida.unidades,
        "unidadesComprom": partida.unidadesComprom,
        "unidadesSurtDev": partida.unidadesSurtDev,
        "unidadesASurtir": partida.unidadesASurtir,
        "precioUnitario": partida.precioUnitario,
        "pctjeDscto": partida.pctjeDscto,
        "pctjeDsctoCli": partida.pctjeDsctoCli,
        "dsctoArt": partida.dsctoArt,
        "dsctoExtra": partida.dsctoExtra,
        "pctjeDsctoVol": partida.pctjeDsctoVol,
        "pctjeDsctoPromo": partida.pctjeDsctoPromo,
        "precioTotalNeto": partida.precioTotalNeto,
        "pctjeComis": partida.pctjeComis,
        "rol": partida.rol,
        "notas": partida.notas,
        "terceroCoId": partida.terceroCoId,
        "posicion": partida.posicion,
      };
}
